{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"eKoNLPy: Korean NLP Python Library for Economic Analysis","text":"<p><code>eKoNLPy</code> is a Korean Natural Language Processing (NLP) Python library specifically designed for economic analysis. It extends the functionality of the <code>Mecab</code> tagger from KoNLPy to improve the handling of economic terms, financial institutions, and company names by classifying them as single nouns. Additionally, it incorporates sentiment analysis features to determine the tone of monetary policy statements, such as hawkish or dovish.</p> <p>Note</p> <p>From version 2.0.0, eKoNLPy integrates the extended tagger with the original tagger. If you want to use the original tagger, set <code>use_original_tagger=True</code> when creating an instance of the <code>Mecab</code> class. Additionally, the <code>Mecab</code> class can be directly imported from the <code>ekonlpy</code> module. The default input text parameter of <code>Mecab.pos()</code> has been changed from <code>phrase</code> to <code>text</code> to be consistent with the original tagger.</p> <p>Note</p> <p>eKoNLPy is built on the fugashi and mecab-ko-dic libraries. For more information on using the <code>Mecab</code> tagger, refer to the fugashi documentation. Since eKoNLPy no longer relies on the KoNLPy library, Java is not required for its use. This makes eKoNLPy compatible with Windows, Linux, and macOS without the need for Java installation. You can also use eKoNLPy on Google Colab.</p> <p>If you wish to tokenize general Korean text with eKoNLPy, you do not need to install the <code>KoNLPy</code> library. Instead, use the same <code>ekonlpy.Mecab</code> class with the <code>use_original_tagger=True</code> option.</p> <p>However, if you plan to use the Korean Sentiment Analyzer (KSA), which employs the <code>Kkma</code> morpheme analyzer, you will need to install the KoNLPy library.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install eKoNLPy, run the following command:</p> <pre><code>pip install ekonlpy\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#part-of-speech-tagging","title":"Part of Speech Tagging","text":"<p>To use the part-of-speech tagging feature, input <code>Mecab.pos(text)</code> just like KoNLPy. First, the input is processed using KoNLPy's Mecab morpheme analyzer. Then, if a combination of consecutive tokens matches a term in the user dictionary, the phrase is separated into compound nouns.</p> <pre><code>from ekonlpy import Mecab\n\nmecab = Mecab()\nmecab.pos('\uae08\ud1b5\uc704\ub294 \ub530\ub77c\uc11c \ubb3c\uac00\uc548\uc815\uacfc \ubcd1\ud589, \uacbd\uae30\uc0c1\ud669\uc5d0 \uc720\uc758\ud558\ub294 \uae08\ub9ac\uc815\ucc45\uc744 \ud3bc\uccd0\ub098\uac00\uae30\ub85c \ud588\ub2e4\uace0 \ubc1d\ud614\ub2e4.')\n</code></pre> <p>[('\uae08', 'MAJ'), ('\ud1b5', 'MAG'), ('\uc704', 'NNG'), ('\ub294', 'JX'), ('\ub530\ub77c\uc11c', 'MAJ'), ('\ubb3c\uac00', 'NNG'), ('\uc548\uc815', 'NNG'), ('\uacfc', 'JC'), ('\ubcd1\ud589', 'NNG'), (',', 'SC'), ('\uacbd\uae30', 'NNG'), ('\uc0c1\ud669', 'NNG'), ('\uc5d0', 'JKB'), ('\uc720\uc758', 'NNG'), ('\ud558', 'XSV'), ('\ub294', 'ETM'), ('\uae08\ub9ac', 'NNG'), ('\uc815\ucc45', 'NNG'), ('\uc744', 'JKO'), ('\ud3bc\uccd0', 'VV+EC'), ('\ub098\uac00', 'VX'), ('\uae30', 'ETN'), ('\ub85c', 'JKB'), ('\ud588', 'VV+EP'), ('\ub2e4\uace0', 'EC'), ('\ubc1d\ud614', 'VV+EP'), ('\ub2e4', 'EF'), ('.', 'SF')]</p> <p>You can also use the Command Line Interface (CLI) to perform part-of-speech tagging:</p> <pre><code>ekonlpy --input \"\uc548\ub155\ud558\uc138\uc694\"\n</code></pre> <p>[('\uc548\ub155', 'NNG'), ('\ud558', 'XSV'), ('\uc138\uc694', 'EP')]</p>"},{"location":"#original-mecab-pos-tagging-fugashi","title":"Original Mecab POS Tagging (fugashi)","text":"<pre><code>from ekonlpy import Mecab\n\nmecab = Mecab(use_original_tagger=True) # set use_original_tagger=True\nmecab.pos('\uae08\ud1b5\uc704\ub294 \ub530\ub77c\uc11c \ubb3c\uac00\uc548\uc815\uacfc \ubcd1\ud589, \uacbd\uae30\uc0c1\ud669\uc5d0 \uc720\uc758\ud558\ub294 \uae08\ub9ac\uc815\ucc45\uc744 \ud3bc\uccd0\ub098\uac00\uae30\ub85c \ud588\ub2e4\uace0 \ubc1d\ud614\ub2e4.')\n</code></pre> <p>[('\uae08', 'MAJ'), ('\ud1b5', 'MAG'), ('\uc704', 'NNG'), ('\ub294', 'JX'), ('\ub530\ub77c\uc11c', 'MAJ'), ('\ubb3c\uac00', 'NNG'), ('\uc548\uc815', 'NNG'), ('\uacfc', 'JC'), ('\ubcd1\ud589', 'NNG'), (',', 'SC'), ('\uacbd\uae30', 'NNG'), ('\uc0c1\ud669', 'NNG'), ('\uc5d0', 'JKB'), ('\uc720\uc758', 'NNG'), ('\ud558', 'XSV'), ('\ub294', 'ETM'), ('\uae08\ub9ac', 'NNG'), ('\uc815\ucc45', 'NNG'), ('\uc744', 'JKO'), ('\ud3bc\uccd0', 'VV+EC'), ('\ub098\uac00', 'VX'), ('\uae30', 'ETN'), ('\ub85c', 'JKB'), ('\ud588', 'VV+EP'), ('\ub2e4\uace0', 'EC'), ('\ubc1d\ud614', 'VV+EP'), ('\ub2e4', 'EF'), ('.', 'SF')]</p>"},{"location":"#lemmatization-and-synonyms","title":"Lemmatization and Synonyms","text":"<p>To enhance the accuracy of sentiment analysis, eKoNLPy offers lemmatization and synonym handling features.</p>"},{"location":"#adding-words-to-dictionary","title":"Adding Words to Dictionary","text":"<p>You can add words to the dictionary in the <code>ekonlpy.tag</code> module's Mecab class, either as a string or a list of strings, using the <code>add_dictionary</code> method.</p> <pre><code>from ekonlpy.tag import Mecab\n\nmecab = Mecab()\nmecab.add_dictionary('\uae08\ud1b5\uc704', 'NNG')\n</code></pre>"},{"location":"#sentiment-analysis","title":"Sentiment Analysis","text":""},{"location":"#korean-monetary-policy-dictionary-mpko","title":"Korean Monetary Policy Dictionary (MPKO)","text":"<p>To perform sentiment analysis using the Korean Monetary Policy dictionary, create an instance of the <code>MPKO</code> class in <code>ekonlpy.sentiment</code>:</p> <pre><code>from ekonlpy.sentiment import MPKO\n\nmpko = MPKO(kind=1)\ntokens = mpko.tokenize(text)\nscore = mpko.get_score(tokens)\n</code></pre> <p>The <code>kind</code> parameter in the <code>MPKO</code> class is used to select a lexicon file:</p> <ul> <li><code>0</code>: A lexicon file generated using a Naive-Bayes classifier with 5-gram tokens as features and changes in call rates as positive/negative labels.</li> <li><code>1</code>: A lexicon file generated using polarity induction and seed propagation methods with 5-gram tokens.</li> </ul>"},{"location":"#korean-monetary-policy-classifier-mpck","title":"Korean Monetary Policy Classifier (MPCK)","text":"<p>To use a classifier for monetary policy sentiment analysis, use the <code>MPCK</code> class from <code>ekonlpy.sentiment</code>:</p> <pre><code>from ekonlpy.sentiment import MPCK\n\nmpck = MPCK()\ntokens = mpck.tokenize(text)\nngrams = mpck.ngramize(tokens)\nscore = mpck.classify(tokens + ngrams, intensity_cutoff=1.5)\n</code></pre> <p>You can set the <code>intensity_cutoff</code> parameter to adjust the intensity threshold for classifying low-confidence sentences as neutral (default: 1.3).</p>"},{"location":"#korean-sentiment-analyzer-ksa","title":"Korean Sentiment Analyzer (KSA)","text":"<p>For general Korean sentiment analysis, use the <code>KSA</code> class. The morpheme analyzer used in this class is <code>Kkma</code>, developed by Seoul National University's IDS Lab. The sentiment dictionary is also from the same lab (reference: http://kkma.snu.ac.kr/).</p> <pre><code>from ekonlpy.sentiment import KSA\n\nksa = KSA()\ntokens = ksa.tokenize(text)\nscore = ksa.get_score(tokens)\n</code></pre>"},{"location":"#harvard-iv-4-dictionary","title":"Harvard IV-4 Dictionary","text":"<p>For general English sentiment analysis, use the Harvard IV-4 dictionary:</p> <pre><code>from ekonlpy.sentiment import HIV4\n\nhiv = HIV4()\ntokens = hiv.tokenize(text)\nscore = hiv.get_score(tokens)\n</code></pre>"},{"location":"#loughran-and-mcdonald-dictionary","title":"Loughran and McDonald Dictionary","text":"<p>For sentiment analysis in the financial domain, use the Loughran and McDonald dictionary:</p> <pre><code>from ekonlpy.sentiment import LM\n\nlm = LM()\ntokens = lm.tokenize(text)\nscore = lm.get_score(tokens)\n</code></pre>"},{"location":"#changelog","title":"Changelog","text":"<p>See the CHANGELOG for more information.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please see the contributing guidelines for more information.</p>"},{"location":"#license","title":"License","text":"<p>eKoNLPy is an open-source software library for Korean Natural Language Processing (NLP), specifically designed for economic analysis. The library is released under the MIT License, allowing developers and researchers to use, modify, and distribute the software freely.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use eKoNLPy in your work or research, please cite the following sources:</p> <ul> <li>Lee, Young Joon, eKoNLPy: A Korean NLP Python Library for Economic Analysis, 2018. Available at: https://github.com/entelecheia/eKoNLPy.</li> <li>Lee, Young Joon, Soohyon Kim, and Ki Young Park. \"Deciphering Monetary Policy Board Minutes with Text Mining: The Case of South Korea.\" Korean Economic Review 35 (2019): 471-511.</li> </ul> <p>You can also use the following BibTeX entry for citation:</p> <pre><code>@misc{lee2018ekonlpy,\n    author= {Lee, Young Joon},\n    year  = {2018},\n    title = {{eKoNLPy: A Korean NLP Python Library for Economic Analysis}},\n    note  = {\\url{https://github.com/entelecheia/eKoNLPy}}\n}\n</code></pre> <p>By citing eKoNLPy in your work, you acknowledge the efforts and contributions of its creators and help promote further development and research in Korean NLP for economic analysis.</p>"}]}