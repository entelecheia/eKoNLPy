[tool.poetry]
name = "eKoNLPy"
version = "2.0.6"
description = "A Korean natural language processing toolkit for economic analysis"
authors = ["Young Joon Lee <entelecheia@hotmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "ekonlpy", from = "src" }]
homepage = "https://ekonlpy.entelecheia.ai/"
repository = "https://github.com/entelecheia/eKoNLPy"
keywords = ["KoNLPy", "Tokenization", "Sentiment analysis", "Monetary policy"]
include = [
    "src/ekonlpy/data/*/*.txt",
    "src/ekonlpy/data/*/*.csv",
    "src/ekonlpy/data/*/*/*.txt",
    "src/ekonlpy/data/*/*/*.csv",
    "src/ekonlpy/data/model/*",
]

[tool.poetry.scripts]
ekonlpy = "ekonlpy.__cli__:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe]
include = [".tasks.toml", ".tasks-extra.toml"]

[tool.poetry.dependencies]
python = "^3.9, <3.13"
fugashi = "^1.3.3"
mecab-ko-dic = "^1.0.0"
nltk = "^3.8.1"
scipy = ">1.10.0,<=1.13.1"
pandas = ">=1.5.3,<=2.2.3"
click = "^8.1.6"

[tool.poetry.group.dev.dependencies]
python-semantic-release = "^9.0.0"
isort = "^5.12.0"
black = "^24.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
flake8-pyproject = "^1.2.2"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"

[tool.black]
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  _version.py
  | .refs
  | tests
  | docs
  | book
  | _build
  | node_modules
  | __pycache__
  | .txt
  | .csv
)
'''

[tool.isort]
profile = "black"
skip = [
    '_version.py',
    'node_modules',
    '_build',
    'docs',
    'tests',
    'venv',
    '.copier-template',
    '.refs',
]

[tool.flake8]
ignore = ['F401', 'E501', 'W503']
exclude = [
    "node_modules",
    "_build",
    "docs",
    "tests",
    "venv",
    ".copier-template",
    ".refs",
]
per-file-ignores = ['__init__.py:F401', '_version.py:W292']

[tool.mypy]
namespace_packages = true
exclude = [
    "node_modules",
    "build",
    "_build",
    "dist",
    "docs",
    "tests",
    "venv",
    ".copier-template",
    ".refs",
]
# 3rd party import
ignore_missing_imports = true
# dynamic typing
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = true
disallow_any_generics = false
disallow_subclassing_any = true
# platform
python_version = "3.8"
# untyped
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
# None and Optional
no_implicit_optional = true
# Warnings
warn_return_any = false
warn_unreachable = true
# Misc
pretty = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:cacheprovider" # deactivating pytest caching.

[tool.coverage.report]
exclude_lines = ['if __name__ == "__main__":']

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.1"
tag_format = "v$version"

[tool.semantic_release]
# General settings
tag_format = "v{version}"
commit_parser = "angular"
major_on_zero = true
allow_zero_version = true
tag_commit = true
no_git_verify = false
version_source = "tag"
commit_version_number = true
commit_message = ":rocket: {version}\n\nAutomatically generated by python-semantic-release"
build_command = "pip install poetry && poetry build --no-cache"

# Version variables
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = ["src/ekonlpy/_version.py:__version__"]

# Remote settings
[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false
token = { env = "GH_TOKEN" }

# Changelog settings
[tool.semantic_release.changelog]
insertion_flag = "<!--next-version-placeholder-->"
mode = "update"

# Commit parser options
[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

# Branch settings
[tool.semantic_release.branches.main]
match = "(main|master|release)"
prerelease_token = "rc"
prerelease = false

# Commit author settings
[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

# Publish settings
[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
